name: deploy

on:
  push:
    branches: ['production']

env:
  DOCKER_NAMESPACE: 'titibebe'
  IMAGE_NAME: 'tablekiosk'
  JAVA_VERSION: '21'

  AWS_REGION: ap-northeast-2
  ECS_SERVICE: tablekiosk
  ECS_CLUSTER: tablekiosk-core
  ECS_TASK_DEFINITION: aws/td.json
  CONTAINER_IMAGE: titibebe/tablekiosk-core
  CONTAINER_NAME: core

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: ${{ env.JAVA_VERSION }}
      - name: Permission to gradle and build
        run: |
          chmod +x ./gradlew
          ./gradlew clean
          ./gradlew bootJar
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: build/libs/*.jar

  push-image:
    runs-on: ubuntu-latest
    needs: [ 'build' ]
    steps:
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: application-jar
      - name: Display structure of downloaded files
        run: ls -R
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            JAR_FILE=./*.jar
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.GIT_ACCESS_TOKEN }}
  deploy:
    runs-on: ubuntu-latest
    needs: [ 'push-image' ]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v4
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.CONTAINER_IMAGE }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v4
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true